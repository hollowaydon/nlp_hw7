import 'byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)
Spell = StringFile['entrain.alpha', vocab, byte];

# YOU WILL FILL IN THE REST
# InvSpell = StringFile['entrain.alpha', byte, vocab];
# export CompleteWord = CDRewrite[( "" : ByteSigmaStar ), "", "[EOS]", ByteSigmaStar, 'sim', 'obl'] @ InvSpell @ LM;

# extra credit
# CWPartial = CDRewrite[( "" : ByteSigmaStar ), "", "[EOS]", ByteSigmaStar, 'sim', 'obl'] @ InvSpell;
# export CompleteWordInContext = ((InvSpell (bytelib.kSpace : " ".vocab) )* CWPartial);

# Question 11
export DelSpaces = CDRewrite[ " ": "", "", "", ByteSigmaStar, 'sim', 'obl' ];

export SpellText = Optimize[ (Spell (" ".vocab:" "))* @ CDRewrite[ " ":"", ("[BOS]" | " "), "", ByteSigmaStar, 'ltr', 'obl' ] ];
export Generate = LM @ SpellText @ DelSpaces;
export InvSpellDel = Invert[ SpellText @ DelSpaces ];
export InvLM = Invert[ LM ] @ SpellText;


